// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200729.8

#ifndef WINRT_HV3DMRPCM_0_H
#define WINRT_HV3DMRPCM_0_H
WINRT_EXPORT namespace winrt::HV3DMRPCM
{
    struct ICHV3DMRPCM;
    struct CHV3DMRPCM;
}
namespace winrt::impl
{
    template <> struct category<HV3DMRPCM::ICHV3DMRPCM>{ using type = interface_category; };
    template <> struct category<HV3DMRPCM::CHV3DMRPCM>{ using type = class_category; };
    template <> inline constexpr auto& name_v<HV3DMRPCM::CHV3DMRPCM> = L"HV3DMRPCM.CHV3DMRPCM";
    template <> inline constexpr auto& name_v<HV3DMRPCM::ICHV3DMRPCM> = L"HV3DMRPCM.ICHV3DMRPCM";
    template <> inline constexpr guid guid_v<HV3DMRPCM::ICHV3DMRPCM>{ 0x62940310,0x848A,0x546D,{ 0x93,0x8C,0x5F,0xB3,0x49,0x0D,0x65,0x33 } }; // 62940310-848A-546D-938C-5FB3490D6533
    template <> struct default_interface<HV3DMRPCM::CHV3DMRPCM>{ using type = HV3DMRPCM::ICHV3DMRPCM; };
    template <> struct abi<HV3DMRPCM::ICHV3DMRPCM>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_HV3DMRPCM_ICHV3DMRPCM
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<HV3DMRPCM::ICHV3DMRPCM>
    {
        template <typename D> using type = consume_HV3DMRPCM_ICHV3DMRPCM<D>;
    };
}
#endif
