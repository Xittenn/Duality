// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200729.8

#ifndef WINRT_HV3DMYSQLSTD_0_H
#define WINRT_HV3DMYSQLSTD_0_H
WINRT_EXPORT namespace winrt::HV3DMYSQLSTD
{
    struct ICHV3DMYSQLSTD;
    struct CHV3DMYSQLSTD;
}
namespace winrt::impl
{
    template <> struct category<HV3DMYSQLSTD::ICHV3DMYSQLSTD>{ using type = interface_category; };
    template <> struct category<HV3DMYSQLSTD::CHV3DMYSQLSTD>{ using type = class_category; };
    template <> inline constexpr auto& name_v<HV3DMYSQLSTD::CHV3DMYSQLSTD> = L"HV3DMYSQLSTD.CHV3DMYSQLSTD";
    template <> inline constexpr auto& name_v<HV3DMYSQLSTD::ICHV3DMYSQLSTD> = L"HV3DMYSQLSTD.ICHV3DMYSQLSTD";
    template <> inline constexpr guid guid_v<HV3DMYSQLSTD::ICHV3DMYSQLSTD>{ 0xF51A34C8,0x875B,0x5BD1,{ 0xBE,0x42,0xBF,0x2B,0xE0,0x2B,0xC6,0x10 } }; // F51A34C8-875B-5BD1-BE42-BF2BE02BC610
    template <> struct default_interface<HV3DMYSQLSTD::CHV3DMYSQLSTD>{ using type = HV3DMYSQLSTD::ICHV3DMYSQLSTD; };
    template <> struct abi<HV3DMYSQLSTD::ICHV3DMYSQLSTD>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_HV3DMYSQLSTD_ICHV3DMYSQLSTD
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<HV3DMYSQLSTD::ICHV3DMYSQLSTD>
    {
        template <typename D> using type = consume_HV3DMYSQLSTD_ICHV3DMYSQLSTD<D>;
    };
}
#endif
