// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200729.8

#ifndef WINRT_HV3DMPU_0_H
#define WINRT_HV3DMPU_0_H
WINRT_EXPORT namespace winrt::HV3DMPU
{
    struct ICHV3DMPU;
    struct CHV3DMPU;
}
namespace winrt::impl
{
    template <> struct category<HV3DMPU::ICHV3DMPU>{ using type = interface_category; };
    template <> struct category<HV3DMPU::CHV3DMPU>{ using type = class_category; };
    template <> inline constexpr auto& name_v<HV3DMPU::CHV3DMPU> = L"HV3DMPU.CHV3DMPU";
    template <> inline constexpr auto& name_v<HV3DMPU::ICHV3DMPU> = L"HV3DMPU.ICHV3DMPU";
    template <> inline constexpr guid guid_v<HV3DMPU::ICHV3DMPU>{ 0x73AA17F2,0x6E3E,0x5D82,{ 0x92,0x2C,0xE2,0x25,0x5D,0xB2,0xDF,0x43 } }; // 73AA17F2-6E3E-5D82-922C-E2255DB2DF43
    template <> struct default_interface<HV3DMPU::CHV3DMPU>{ using type = HV3DMPU::ICHV3DMPU; };
    template <> struct abi<HV3DMPU::ICHV3DMPU>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_HV3DMPU_ICHV3DMPU
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<HV3DMPU::ICHV3DMPU>
    {
        template <typename D> using type = consume_HV3DMPU_ICHV3DMPU<D>;
    };
}
#endif
