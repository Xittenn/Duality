// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200729.8

#pragma once
#include "winrt/HV3DMPU.h"
namespace winrt::HV3DMPU::implementation
{
    template <typename D, typename... I>
    struct __declspec(empty_bases) CHV3DMPU_base : implements<D, HV3DMPU::CHV3DMPU, I...>
    {
        using base_type = CHV3DMPU_base;
        using class_type = HV3DMPU::CHV3DMPU;
        using implements_type = typename CHV3DMPU_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"HV3DMPU.CHV3DMPU";
        }
    };
}
namespace winrt::HV3DMPU::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct __declspec(empty_bases) CHV3DMPUT : implements<D, Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = HV3DMPU::CHV3DMPU;

        hstring GetRuntimeClassName() const
        {
            return L"HV3DMPU.CHV3DMPU";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_CHV3DMPU_XAML_G_H) || __has_include("CHV3DMPU.xaml.g.h")
#include "CHV3DMPU.xaml.g.h"
#else

namespace winrt::HV3DMPU::implementation
{
    template <typename D, typename... I>
    using CHV3DMPUT = CHV3DMPU_base<D, I...>;
}

#endif
